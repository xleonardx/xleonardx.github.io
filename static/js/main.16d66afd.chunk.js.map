{"version":3,"sources":["components/FetchCard.js","App.js","reportWebVitals.js","index.js"],"names":["FetchCard","props","state","loading","random","card","searchcard","sayHello","bind","textChange","this","fetchData","a","url","fetch","response","json","data","setState","console","log","event","target","value","replaceAll","type","id","onChange","onClick","name","desc","height","src","card_images","image_url","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAEqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,MAAQ,CACNC,SAAS,EACTC,QAAQ,EACRC,KAAM,KACNC,WAAY,MAPZ,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAHD,E,qDAYnB,WACEE,KAAKC,c,8DAEP,gCAAAC,EAAA,4DACoB,kDACZC,EACJ,sDACAH,KAAKR,MAAMI,WAJf,SAKyBQ,MAAOJ,KAAKR,MAAMI,WAAyBO,EAJhD,mDADpB,cAKQE,EALR,gBAMqBA,EAASC,OAN9B,UAMQC,EANR,iDASW,qCATX,QAWEP,KAAKQ,SAAS,CACZb,KAAOK,KAAKR,MAAMI,WAAoBW,EAAKA,KAAK,GAAjBA,EAC/Bd,SAAS,IAbb,iD,4EAiBA,WACEgB,QAAQC,IAAIV,KAAKR,MAAMI,YACvBI,KAAKC,c,wBAGP,SAAWU,GACTX,KAAKQ,SAAS,CAAEZ,WAAYe,EAAMC,OAAOC,MAAMC,WAAW,IAAK,W,oBAEjE,WAAU,IAAD,OACP,OACE,8BACGd,KAAKR,MAAMC,UAAYO,KAAKR,MAAMG,KACjC,6CAEA,gCACE,gCACE,uBACEoB,KAAK,OACLC,GAAG,WACHC,SAAU,SAACN,GAAD,OAAW,EAAKZ,WAAWY,MAEvC,wBAAQI,KAAK,SAASG,QAASlB,KAAKH,SAApC,uBAKF,+CAAkBG,KAAKR,MAAMG,KAAKwB,QAClC,+CAAkBnB,KAAKR,MAAMG,KAAKoB,QAClC,iDAAoBf,KAAKR,MAAMG,KAAKyB,QACpC,8BACE,qBACEC,OAAO,QACPC,IAAKtB,KAAKR,MAAMG,KAAK4B,YAAY,GAAGC,uB,GAjEbC,IAAMC,WCQ9BC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.16d66afd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class FetchCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sayHello = this.sayHello.bind(this);\r\n    this.textChange = this.textChange.bind(this);\r\n  }\r\n  state = {\r\n    loading: true,\r\n    random: false,\r\n    card: null,\r\n    searchcard: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n  async fetchData() {\r\n    const randomUrl = \"https://db.ygoprodeck.com/api/v7/randomcard.php\";\r\n    const url =\r\n      \"https://db.ygoprodeck.com/api/v7/cardinfo.php?name=\" +\r\n      this.state.searchcard;\r\n    const response = await fetch(!this.state.searchcard ? randomUrl : url);\r\n    const data = await response.json();\r\n\r\n    if (!data) {\r\n      return <div>a</div>;\r\n    }\r\n    this.setState({\r\n      card: !this.state.searchcard ? data : data.data[0],\r\n      loading: false,\r\n    });\r\n    // console.log(this.state.card.card_images[0]);\r\n  }\r\n  sayHello() {\r\n    console.log(this.state.searchcard);\r\n    this.fetchData();\r\n  }\r\n\r\n  textChange(event) {\r\n    this.setState({ searchcard: event.target.value.replaceAll(\" \", \"%20\") });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.loading || !this.state.card ? (\r\n          <div>loading...</div>\r\n        ) : (\r\n          <div>\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                id=\"txsearch\"\r\n                onChange={(event) => this.textChange(event)}\r\n              ></input>\r\n              <button type=\"button\" onClick={this.sayHello}>\r\n                Search\r\n              </button>\r\n            </div>\r\n\r\n            <div>Card Name : {this.state.card.name}</div>\r\n            <div>Card Type : {this.state.card.type}</div>\r\n            <div>Description : {this.state.card.desc}</div>\r\n            <div>\r\n              <img\r\n                height=\"500px\"\r\n                src={this.state.card.card_images[0].image_url}\r\n              ></img>\r\n              {/* <img\r\n                max-height=\"5%\"\r\n                src={this.state.card.card_images[0].image_url_small}\r\n              ></img> */}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction sayHello() {}\r\n","import \"./App.css\";\nimport FetchCard from \"./components/FetchCard.js\";\nfunction App() {\n  return (\n    <div>\n      <FetchCard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}